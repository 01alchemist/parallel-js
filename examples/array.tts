turbo.init(32);

type float64 = number;

@turbo class RGBA{

    R:float64
    G:float64
    B:float64
    A:float64

    @method init(SELF:number, r=0,g=0,b=0,a=0){
        SELF.R = r;
        SELF.G = g;
        SELF.B = b;
        SELF.A = a;
        return SELF;
    }

    static rgba(SELF:number){
        return {
            r:SELF.R,
            g:SELF.G,
            b:SELF.B,
            a:SELF.A
        }
    }

} @end

@turbo class Bitmap{

    Width:int32
    Height:int32
    data:RGBA.Array

    @method init(SELF, width:number, height:number){

        SELF.Width = width;
        SELF.Height = height;
        let size = width * height;
        let _data = @new RGBA.Array(size);

        for(let y=0;y<height;y++){
            for(let x=0;x<width;x++){
                let index:number = (y * width) + x;
                RGBA.Array.setAt(_data, index, RGBA.init(@new RGBA));
            }
        }

        SELF.data = _data;

        return SELF;
    }

    static NewBitmap(w:number, h:number):number{
        return Bitmap.init(@new Bitmap, w, h);
    }

    static Length(SELF):number{

        let data = SELF.data;

        return RGBA.Array.len(data);
    }

    static setPixel(SELF, x:number, y:number, rgba):number{
        let index:number = (y * SELF.Width) + x;
        let _rgba = @new RGBA;
        RGBA.init(_rgba, rgba.r, rgba.g, rgba.b, rgba.a);
        return RGBA.Array.setAt(SELF.data, index, _rgba);
    }

    static getPixel(SELF, x:number, y:number){
        if(x > SELF.Width - 1 || y > SELF.Height - 1){
            throw new RangeError("You are trying to access out of range pixel");
        }
        let index:number = (y * SELF.Width) + x;
        return RGBA.rgba(RGBA.Array.at(SELF.data, index));
    }
    static distroy(SELF){
        let width = SELF.Width;
        for(let y=0;y < SELF.Height;y++){
            for(let x=0;x < width;x++){
                let index:number = (y * width) + x;
                turbo.Runtime.free(RGBA.Array.at(SELF.data, index));
            }
        }
        turbo.Runtime.free(SELF);
    }

} @end